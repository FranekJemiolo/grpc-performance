# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: grpc_performance.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from grpc_performance import grpc_performance_pb2


class DataStreamerBase(abc.ABC):

    @abc.abstractmethod
    async def streamData(self, stream: 'grpclib.server.Stream[grpc_performance_pb2.StreamRequest, grpc_performance_pb2.SingleMessage]') -> None:
        pass

    @abc.abstractmethod
    async def streamBatchData(self, stream: 'grpclib.server.Stream[grpc_performance_pb2.StreamRequest, grpc_performance_pb2.BatchMessage]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/grpc_performance.DataStreamer/streamData': grpclib.const.Handler(
                self.streamData,
                grpclib.const.Cardinality.UNARY_STREAM,
                grpc_performance_pb2.StreamRequest,
                grpc_performance_pb2.SingleMessage,
            ),
            '/grpc_performance.DataStreamer/streamBatchData': grpclib.const.Handler(
                self.streamBatchData,
                grpclib.const.Cardinality.UNARY_STREAM,
                grpc_performance_pb2.StreamRequest,
                grpc_performance_pb2.BatchMessage,
            ),
        }


class DataStreamerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.streamData = grpclib.client.UnaryStreamMethod(
            channel,
            '/grpc_performance.DataStreamer/streamData',
            grpc_performance_pb2.StreamRequest,
            grpc_performance_pb2.SingleMessage,
        )
        self.streamBatchData = grpclib.client.UnaryStreamMethod(
            channel,
            '/grpc_performance.DataStreamer/streamBatchData',
            grpc_performance_pb2.StreamRequest,
            grpc_performance_pb2.BatchMessage,
        )
